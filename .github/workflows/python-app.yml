name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

env:
  COMPOSE_PROJECT_NAME: telegramgroupie

jobs:
  # ==============================================
  # Unit Tests - Fast, Isolated
  # ==============================================
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run unit tests
      env:
        APP_ENV: test
      run: |
        python -m pytest tests/unit/ -v --tb=short

  # ==============================================
  # Docker Integration Tests - Optimized
  # ==============================================
  docker-tests:
    name: 🐳 Docker Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and start test environment
      run: |
        echo "🐳 Starting optimized Docker test environment..."
        docker compose -f docker-compose.test.yml up -d --build --wait

    - name: Verify services health
      run: |
        echo "🔍 Verifying service health..."
        # Wait for application to be fully ready
        sleep 5
        docker compose -f docker-compose.test.yml exec -T app curl -f http://localhost:8080/healthz
        echo "✅ Services are healthy!"

    - name: Run Docker integration tests
      run: |
        echo "🧪 Running Docker integration tests..."
        docker compose -f docker-compose.test.yml run --rm test-runner

    - name: Collect test results
      if: always()
      run: |
        # Copy test results if they exist
        mkdir -p test-results
        docker compose -f docker-compose.test.yml cp test-runner:/app/test-results ./test-results/ || echo "No test results to copy"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: docker-test-results
        path: test-results/

    - name: Show logs on failure
      if: failure()
      run: |
        echo "🔍 Showing application logs for debugging..."
        docker compose -f docker-compose.test.yml logs app

    - name: Cleanup
      if: always()
      run: |
        docker compose -f docker-compose.test.yml down -v --remove-orphans

  # ==============================================
  # Coverage Report
  # ==============================================
  coverage:
    name: 📊 Test Coverage
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run tests with coverage
      env:
        APP_ENV: test
      run: |
        python -m pytest tests/unit/ --cov=. --cov-report=xml --cov-report=term-missing

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.xml

  # ==============================================
  # Final Status Check
  # ==============================================
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [unit-tests, docker-tests, coverage]
    if: always()

    steps:
    - name: Check CI status
      run: |
        echo "=== CI Pipeline Status ==="
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Docker Tests: ${{ needs.docker-tests.result }}"
        echo "Coverage: ${{ needs.coverage.result }}"

        if [[ "${{ needs.unit-tests.result }}" == "success" && \
              "${{ needs.docker-tests.result }}" == "success" && \
              "${{ needs.coverage.result }}" == "success" ]]; then
          echo "🎉 All CI checks passed!"
          exit 0
        else
          echo "❌ Some CI checks failed!"
          exit 1
        fi
