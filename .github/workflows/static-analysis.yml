name: 🔍 Static Code Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly security scans
    - cron: '0 0 * * 0'

env:
  PYTHON_VERSION: '3.11'

jobs:
  # ==============================================
  # Pre-commit and Basic Checks
  # ==============================================
  pre-commit:
    name: 🔍 Pre-commit Checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit
        pip install -r requirements-dev.txt

    - name: Run pre-commit
      run: pre-commit run --all-files
      continue-on-error: true

  # ==============================================
  # Ruff - Ultra-fast linting and formatting
  # ==============================================
  ruff-analysis:
    name: ⚡ Ruff Analysis
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Ruff
      run: |
        python -m pip install --upgrade pip
        pip install ruff

    - name: Run Ruff linter
      run: |
        ruff check . --output-format=github --show-fixes

    - name: Run Ruff formatter
      run: |
        ruff format --check .

    - name: Generate Ruff report
      run: |
        ruff check . --output-format=json > ruff-report.json
      continue-on-error: true

    - name: Upload Ruff report
      uses: actions/upload-artifact@v3
      with:
        name: ruff-report
        path: ruff-report.json

  # ==============================================
  # Advanced Security Analysis
  # ==============================================
  security-analysis:
    name: 🛡️ Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety

    - name: Run Bandit security scan
      run: |
        bandit -r *.py mock_*.py --skip B101,B104,B105,B201,B605,B607 -f json -o bandit-report.json
      continue-on-error: true

    - name: Run Safety dependency check
      run: |
        safety check --short-report
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
      if: always()

  # ==============================================
  # CodeQL Analysis (GitHub native)
  # ==============================================
  codeql-analysis:
    name: 🔎 CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: +security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  # ==============================================
  # Code Complexity Analysis
  # ==============================================
  complexity-analysis:
    name: 📈 Complexity Analysis
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install complexity tools
      run: |
        python -m pip install --upgrade pip
        pip install radon vulture xenon

    - name: Run Radon complexity analysis
      run: |
        radon cc . --json > radon-complexity.json
        radon mi . --json > radon-maintainability.json
        radon raw . --json > radon-raw.json
      continue-on-error: true

    - name: Run Vulture dead code detection
      run: |
        vulture . --json > vulture-report.json
      continue-on-error: true

    - name: Run Xenon complexity check
      run: |
        xenon --max-absolute B --max-modules A --max-average A .
      continue-on-error: true

    - name: Upload complexity reports
      uses: actions/upload-artifact@v3
      with:
        name: complexity-reports
        path: |
          radon-*.json
          vulture-report.json
      if: always()

  # ==============================================
  # License and Dependency Analysis
  # ==============================================
  dependency-analysis:
    name: 📦 Dependency Analysis
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependency tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses pip-audit pipdeptree

    - name: Install project dependencies
      run: |
        pip install -r requirements.txt

    - name: Generate license report
      run: |
        pip-licenses --format=json --output-file=licenses.json
      continue-on-error: true

    - name: Run pip-audit security check
      run: |
        pip-audit --format=json --output=pip-audit.json
      continue-on-error: true

    - name: Generate dependency tree
      run: |
        pipdeptree --json > dependency-tree.json
      continue-on-error: true

    - name: Upload dependency reports
      uses: actions/upload-artifact@v3
      with:
        name: dependency-reports
        path: |
          licenses.json
          pip-audit.json
          dependency-tree.json
      if: always()

  # ==============================================
  # SonarCloud Analysis (Optional)
  # ==============================================
  sonarcloud-analysis:
    name: 📊 SonarCloud Analysis
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'  # Skip on scheduled runs
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run tests with coverage
      run: |
        python -m pytest tests/ -k "not docker" --cov=. --cov-report=xml --cov-report=term-missing
      continue-on-error: true

    - name: Generate additional reports
      run: |
        # Bandit report
        bandit -r *.py mock_*.py --skip B101,B104,B105,B201,B605,B607 -f json -o bandit-report.json || true
      continue-on-error: true

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true

  # ==============================================
  # Quality Gate Summary
  # ==============================================
  quality-gate:
    name: 🎯 Quality Gate
    runs-on: ubuntu-latest
    needs: [ruff-analysis, security-analysis, complexity-analysis]
    if: always()
    steps:
    - name: Check quality gate status
      run: |
        echo "=== Quality Gate Summary ==="
        echo "Ruff Analysis: ${{ needs.ruff-analysis.result }}"
        echo "Security Analysis: ${{ needs.security-analysis.result }}"
        echo "Complexity Analysis: ${{ needs.complexity-analysis.result }}"

        # More lenient quality gate - allow some non-critical failures
        if [[ "${{ needs.ruff-analysis.result }}" == "failure" ]]; then
          echo "❌ Critical: Ruff analysis failed!"
          exit 1
        else
          echo "✅ Quality gate passed!"
        fi

  # ==============================================
  # Generate Quality Report
  # ==============================================
  quality-report:
    name: 📋 Quality Report
    runs-on: ubuntu-latest
    needs: [ruff-analysis, security-analysis, complexity-analysis, dependency-analysis]
    if: always()
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      continue-on-error: true

    - name: Generate quality report
      run: |
        cat > quality-report.md << 'EOF'
        # 📊 Code Quality Report

        **Repository:** ${{ github.repository }}
        **Branch:** ${{ github.ref_name }}
        **Commit:** ${{ github.sha }}
        **Date:** $(date)

        ## 🔍 Analysis Results

        | Tool | Status | Report |
        |------|--------|---------|
        | Ruff | ${{ needs.ruff-analysis.result }} | Available |
        | Security Scan | ${{ needs.security-analysis.result }} | Available |
        | Complexity | ${{ needs.complexity-analysis.result }} | Available |
        | Dependencies | ${{ needs.dependency-analysis.result }} | Available |

        ## 📈 Metrics Summary

        - **Files Analyzed:** $(find . -name "*.py" -not -path "./venv/*" | wc -l)
        - **Lines of Code:** $(find . -name "*.py" -not -path "./venv/*" -exec wc -l {} + | tail -1 | awk '{print $1}')
        - **Test Coverage:** Check coverage report

        ## 🎯 Quality Gate

        Overall Status: **${{ needs.ruff-analysis.result == 'success' && 'PASSED' || 'FAILED' }}**

        EOF

    - name: Upload quality report
      uses: actions/upload-artifact@v3
      with:
        name: quality-report
        path: quality-report.md
