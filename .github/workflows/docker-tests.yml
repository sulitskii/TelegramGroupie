name: üê≥ Docker Integration Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # Run weekly to ensure Docker environment stability
  schedule:
    - cron: '0 2 * * 0'  # Sunday at 2 AM UTC

permissions:
  contents: read

jobs:
  # ==============================================
  # Docker Integration Tests with Compose
  # ==============================================
  docker-tests:
    name: üê≥ Docker Integration Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Set up environment
      run: |
        # Create test results directory
        mkdir -p test-results

        # Set up environment for Docker Compose
        echo "COMPOSE_PROJECT_NAME=telegramgroupie-test" >> $GITHUB_ENV

    - name: Build and start test environment
      run: |
        # Use docker compose with --wait flag for proper service readiness
        docker compose -f docker-compose.test.yml up -d --build --wait

    - name: Verify services are running
      run: |
        echo "üîç Checking service health..."

        # Check application health
        docker compose -f docker-compose.test.yml exec -T app curl -f http://localhost:8080/healthz

        # Check Firestore emulator
        docker compose -f docker-compose.test.yml exec -T firestore-emulator nc -z localhost 8080

        echo "‚úÖ All services are healthy!"

    - name: Run basic Docker integration test
      run: |
        # Run our existing basic Docker test script
        bash scripts/run-basic-docker-test.sh

    - name: Run comprehensive Docker tests
      run: |
        # Run Docker tests using the test runner service
        docker compose -f docker-compose.test.yml run --rm test-runner

    - name: Run manual Docker tests (fallback)
      if: failure()
      run: |
        # Alternative approach: run tests from host against Docker services
        pip install pytest requests
        APP_URL=http://localhost:8080 python -m pytest tests/docker/ -v -m "docker" --tb=short

    - name: Collect test results
      if: always()
      run: |
        # Copy test results from containers
        docker compose -f docker-compose.test.yml cp test-runner:/app/test-results ./test-results/ || true

        # Show test results
        if [ -f test-results/docker-tests.xml ]; then
          echo "üìä Test results found"
          ls -la test-results/
        fi

    - name: Upload Docker test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: docker-test-results
        path: docker-test-results.json

    - name: Collect Docker logs
      if: failure()
      run: |
        echo "üîç Collecting Docker logs for debugging..."
        docker compose -f docker-compose.test.yml logs app
        docker compose -f docker-compose.test.yml logs firestore-emulator
        docker compose -f docker-compose.test.yml logs test-runner

    - name: Cleanup Docker environment
      if: always()
      run: |
        docker compose -f docker-compose.test.yml down -v --remove-orphans

  # ==============================================
  # Legacy Docker Tests (for comparison)
  # ==============================================
  legacy-docker-tests:
    name: üê≥ Legacy Docker Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'  # Only run on scheduled builds

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"

    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest requests

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      run: |
        docker build -t telegramgroupie:test .

    - name: Run basic Docker test
      run: |
        bash scripts/run-basic-docker-test.sh

    - name: Run legacy Docker integration tests
      run: |
        # Start container for testing (old approach)
        docker run -d \
          --name telegramgroupie-test \
          -p 8081:8080 \
          -e TESTING=true \
          -e GCP_PROJECT_ID=test-project \
          -e WEBHOOK_SECRET=test_webhook_secret_123 \
          telegramgroupie:test

        # Wait for container to be ready (old approach with sleep)
        sleep 15

        # Run pytest against the running container
        APP_URL=http://localhost:8081 python -m pytest tests/docker/ -v -m "docker"

    - name: Cleanup legacy containers
      if: always()
      run: |
        docker stop telegramgroupie-test || true
        docker rm telegramgroupie-test || true
