FROM python:3.11-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    netcat-traditional \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Create test results directory
RUN mkdir -p /app/test-results

# Copy requirements first for better caching
COPY requirements.txt requirements-dev.txt ./

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir -r requirements-dev.txt

# Copy source code
COPY . ./src/

# Set working directory to source
WORKDIR /app/src

# Set environment variables for testing
ENV PYTHONPATH=/app/src
ENV FLASK_ENV=testing
ENV TESTING=true

# Create a script to wait for services and run tests
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
echo "🔍 Waiting for application to be ready..."\n\
for i in {1..30}; do\n\
  if curl -f http://app:8080/healthz >/dev/null 2>&1; then\n\
    echo "✅ Application is ready!"\n\
    break\n\
  fi\n\
  echo "⏳ Waiting for application... ($i/30)"\n\
  sleep 2\n\
done\n\
\n\
echo "🔍 Waiting for Firestore emulator..."\n\
for i in {1..30}; do\n\
  if nc -z firestore-emulator 8081; then\n\
    echo "✅ Firestore emulator is ready!"\n\
    break\n\
  fi\n\
  echo "⏳ Waiting for Firestore emulator... ($i/30)"\n\
  sleep 2\n\
done\n\
\n\
echo "🧪 Running integration tests..."\n\
python -m pytest tests/test_integration.py -v --tb=short \\\n\
  --junitxml=/app/test-results/junit.xml \\\n\
  --html=/app/test-results/report.html \\\n\
  --self-contained-html \\\n\
  --cov=. \\\n\
  --cov-report=html:/app/test-results/coverage \\\n\
  --cov-report=term-missing\n\
' > /app/run-tests.sh && chmod +x /app/run-tests.sh

# Default command
CMD ["/app/run-tests.sh"] 